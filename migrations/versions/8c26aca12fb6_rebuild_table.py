"""rebuild table

Revision ID: 8c26aca12fb6
Revises: 58d3d1494b0e
Create Date: 2024-11-28 14:04:30.296785

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "8c26aca12fb6"
down_revision: Union[str, None] = "58d3d1494b0e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "arena",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name_arena", sa.String(length=100), nullable=False),
        sa.Column("id_point", sa.Integer(), nullable=False),
        sa.Column(
            "created_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["id_point"], ["point.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name_arena", "id_point", name="arena_point_uc"),
    )
    op.create_table(
        "game_player",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("id_game", sa.Integer(), nullable=False),
        sa.Column("id_player", sa.Integer(), nullable=False),
        sa.Column(
            "created_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["id_game"], ["game.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["id_player"], ["player.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id_game", "id_player", name="game_player_uc"),
    )
    op.drop_table("tournament_player")
    op.drop_table("tournament_team")
    op.add_column(
        "game", sa.Column("id_first_team", sa.Integer(), nullable=False)
    )
    op.add_column(
        "game", sa.Column("id_second_team", sa.Integer(), nullable=False)
    )
    op.add_column(
        "game", sa.Column("id_tournament", sa.Integer(), nullable=False)
    )
    op.drop_constraint("game_second_team_fkey", "game", type_="foreignkey")
    op.drop_constraint("game_first_team_fkey", "game", type_="foreignkey")
    op.create_foreign_key(
        None, "game", "team", ["id_second_team"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "game", "team", ["id_first_team"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None,
        "game",
        "tournament",
        ["id_tournament"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("game", "second_team")
    op.drop_column("game", "first_team")
    op.add_column("stat", sa.Column("count", sa.Integer(), nullable=False))
    op.add_column("stat", sa.Column("id_game", sa.Integer(), nullable=False))
    op.create_unique_constraint(
        "stat_uc", "stat", ["id_player", "id_parameter", "id_game"]
    )
    op.drop_constraint("stat_id_player_fkey", "stat", type_="foreignkey")
    op.drop_constraint("stat_id_assistant_fkey", "stat", type_="foreignkey")
    op.create_foreign_key(
        None, "stat", "game", ["id_game"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "stat", "player", ["id_player"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("stat", "accuracy")
    op.drop_column("stat", "id_assistant")
    op.drop_column("stat", "result")
    op.add_column(
        "tournament", sa.Column("id_arena", sa.Integer(), nullable=False)
    )
    op.drop_constraint(
        "tournament_id_point_fkey", "tournament", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "tournament", "arena", ["id_arena"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("tournament", "id_point")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "tournament",
        sa.Column(
            "id_point", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "tournament", type_="foreignkey")
    op.create_foreign_key(
        "tournament_id_point_fkey",
        "tournament",
        "point",
        ["id_point"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("tournament", "id_arena")
    op.add_column(
        "stat",
        sa.Column("result", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "stat",
        sa.Column(
            "id_assistant", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "stat",
        sa.Column(
            "accuracy", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "stat", type_="foreignkey")
    op.drop_constraint(None, "stat", type_="foreignkey")
    op.create_foreign_key(
        "stat_id_assistant_fkey",
        "stat",
        "tournament_player",
        ["id_assistant"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "stat_id_player_fkey",
        "stat",
        "tournament_player",
        ["id_player"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint("stat_uc", "stat", type_="unique")
    op.drop_column("stat", "id_game")
    op.drop_column("stat", "count")
    op.add_column(
        "game",
        sa.Column(
            "first_team", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "game",
        sa.Column(
            "second_team", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.drop_constraint(None, "game", type_="foreignkey")
    op.drop_constraint(None, "game", type_="foreignkey")
    op.drop_constraint(None, "game", type_="foreignkey")
    op.create_foreign_key(
        "game_first_team_fkey",
        "game",
        "team",
        ["first_team"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "game_second_team_fkey",
        "game",
        "team",
        ["second_team"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("game", "id_tournament")
    op.drop_column("game", "id_second_team")
    op.drop_column("game", "id_first_team")
    op.create_table(
        "tournament_team",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('tournament_team_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "id_tournament", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "id_team", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_on",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["id_team"],
            ["team.id"],
            name="tournament_team_id_team_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["id_tournament"],
            ["tournament.id"],
            name="tournament_team_id_tournament_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="tournament_team_pkey"),
        sa.UniqueConstraint(
            "id_tournament", "id_team", name="tournament_team_uc"
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "tournament_player",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "id_player", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "id_tournament_team",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_on",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_on",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["id_player"],
            ["player.id"],
            name="tournament_player_id_player_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["id_tournament_team"],
            ["tournament_team.id"],
            name="tournament_player_id_tournament_team_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="tournament_player_pkey"),
        sa.UniqueConstraint(
            "id_player", "id_tournament_team", name="tournament_player_uc"
        ),
    )
    op.drop_table("game_player")
    op.drop_table("arena")
    # ### end Alembic commands ###
